
#################################################################################################################
###  Sent mail notification prior RFC implementation

$SearchBase="OU=Users,OU=Cegeka,DC=cegekavirtual,DC=local"
$smtpServer="smtp.cegeka.be"
$from = "SharedCegekavirtualAdministrator <no-reply@cegeka.com>"
$logging = $true # Set to $false to Disable Logging
$logFile = "D:\AccountPasswordExpiration\Logs\SendMailNotification.csv" # ie. c:\mylog.csv

$adminEmailAddr = "vCenterAlerts@cegeka.com" #,"Admin2@example.com","Admin3@example.com" #multiple addr allowed but MUST be independent strings separated by comma
#################################################################################################################

# Create CSV Log
if ($logging -eq $true) {
    #Always purge old CSV file
    Out-File $logfile
    Add-Content $logfile "`"Date`",`"SAMAccountName`",`"DisplayName`",`"Created`",`"PasswordSet`",`"DaystoExpire`",`"ExpiresOn`",`"EmailAddress`",`"Notified`",`"LastLogonDate`""
}

$countsent=0
$countnotsent=0
$countfailed=0


Import-Module ActiveDirectory

$DomainName = Get-ADDomainController | Select-Object Name, Domain
$domain = ($DomainName.Domain).split(".")[0]

$users = Get-ADUser -SearchBase $SearchBase -SearchScope Subtree -Filter {(Enabled -eq $true) -and (PasswordNeverExpires -eq $false)} -Properties sAMAccountName, displayName, PasswordNeverExpires, PasswordExpired, PasswordLastSet, EmailAddress, lastLogon, whenCreated, LastLogonDate

$countprocessed={$users}.Count
Write-Host "$countprocessed users to process from $SearchBase`:`n" -ForegroundColor Green

# Process Each User
foreach ($user in $users) {

    $dName = $user.displayName
    $sName = $user.sAMAccountName
    $recipient = $user.emailaddress


    # Email Subject Set Here
    $subject="[Cegeka Cloud] User account Password Policy changed - RFC 1636489"

    # Email Body Set Here, Note You can use HTML, including Images.
    $body="
    <p>Dear $dName,<br></p>

    <p>Please be informed that due to RFC <a href='https://sd.cegeka.com/CAisd/pdmweb.exe?OP=SEARCH+FID=123+FACTORY=chg+SKIPLIST=1+QBE.IN.chg_ref_num=1636489'>1636489</a>, your Active Directory account password for <b>$domain\$sName</b> may expire.<br>
    If you will not be able to login on <a href='https://cloud.cegeka.com/'>SHARED</a> Virtulization infrastructure you need to change your account password on <a href='https://csc.cegeka.com/RequestCenter/website/CSC/application/search.html?route=search&q=Reset+Password+for+vCenter+User+Account+&tkq=on'>CSC Order Portal</a>.<br>
    'Reset Password for vCenter User Account (Cegeka Cloud)' service will allow to change the domain user account password. The autogenerated password will be sent by email with Cegeka OneTimeSecret tool.</p>
    
    <p>This is an automatic email. If you want to reply please do so to Virtualisatie@cegeka.com.<br></p>

    <p>Kind regards,<br>
    Virtualization team<br>
    </p>
    "

    if (($emailaddress) -ne $null) {
        
        try {
            Send-Mailmessage -smtpServer $smtpServer -from $from -to $recipient -subject $subject -body $body -bodyasHTML -priority High -Encoding $textEncoding -ErrorAction Stop -ErrorVariable err
        } catch {
            write-host "Error: Could not send email to $recipient via $smtpServer"
            $sent = "Send fail"
            $countfailed++
        } finally {
            if ($err.Count -eq 0) {
                write-host "Sent email for $sName to $recipient"
                $countsent++
            }
        }
    } else {
        Write-Host "$dName ($sName) has no email address."
        $sent = "No addr"
        $countnotsent++
    }


    # If Logging is Enabled Log Details
    if ($logging -eq $true) {
        Add-Content $logfile "`"$date`",`"$sName`",`"$dName`",`"$whencreated`",`"$passwordSetDate`",`"$daystoExpire`",`"$expireson`",`"$emailaddress`",`"$sent`",`"$lastLogonDate`""
    }



}





Write-Host "$countprocessed Users from `"$SearchBase`" Processed in $minutes minutes $seconds seconds."
Write-Host "$countsent Emails Sent."
Write-Host "$countnotsent Emails skipped."
Write-Host "$countfailed Emails failed."

if ($logging -eq $true) {
    #sort the CSV file
    Rename-Item $logfile "$logfile.old"
    Import-Csv "$logfile.old" | sort ExpiresOn | export-csv $logfile -NoTypeInformation
    Remove-Item "$logFile.old"
    Write-Host "CSV File created at ${logfile}."


    $body="
    See the attached CSV<br>
    $countprocessed users from `"$SearchBase`" Processed in $minutes minutes $seconds seconds.<br>
    $countsent Emails Sent.<br>
    $countnotsent Emails skipped.<br>
    $countfailed Emails failed.
    "

    try {
        Send-Mailmessage -smtpServer $smtpServer -from $from -to $adminEmailAddr -subject "Password expiry initial notifications" -body $body -bodyasHTML -Attachments "$logFile" -priority High -Encoding $textEncoding -ErrorAction Stop -ErrorVariable err
    } catch {
         write-host "Error: Failed to email CSV log to $adminEmailAddr via $smtpServer"
    } finally {
        if ($err.Count -eq 0) {
            write-host "CSV emailed to $adminEmailAddr"
        }
    }
}